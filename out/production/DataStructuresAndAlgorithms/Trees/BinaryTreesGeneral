A binary tree is a node based data structure
Unlike linked list in which nodes are based in a linear order, in a binary tree nodes are places in a hierarchical order.

Binary Trees General Facts
1. "What do we do if we want a data structure that maintains order, and also has fast search, insertion
and deletion? Neither an ordered array nor a hash table is ideal. Enter BINARY TREE"
2. A tree, and specially a Binary Tree is a Node-Based DS.
3. The upper most node is called the "Root". An 'Edge' is a line connecting the nodes.
4. Concept of Parent and Children exists.
5. A tree also has levels.
6. A tree is a non linear data structure.
7. Data is organized in a hierarchical manner. Therefore searching becomes fast.
8. Parent Node - Immediate predecessor of a node.
9. Leaf Node - A node that has no child.
10. Level - Distance of a node from root.
11. Height of a Tree - Total number of levels in a tree.
12. Siblings - Two or more nodes which have same parent.
13. Path - Sequence of nodes N1, N2, ...Nx such that each node N(i) is parent of Ni+1
for 1 < i <= x
14. Ancestor - Node N(a) is an ancestor on node N(x) if N(a) lies in the unique path from root Node to N(x)
15. Descendant - If Node N(a) is ancestor of Node N(x) the node N(x) is the descendent of node N(a)
16. Degree - The number of subtrees or children of a node.
17. Forest - A Forest is a set of n disjoint trees where n>=0

Definition of Tree
A tree is a finite set of nodes such that:
1. There is a distinguished node called root.
2. Remaining nodes are partitioned into n >=0 disjoint sets T1, T2, ...Tn where each of these
sets is a tree. The sets T1, T2, Tn are subtrees of root.

Strictly Binary Tree:
1. A binary tree in which each node is either a leaf node or has two children.
2. A strictly binary tree with n leaf nodes has total 2n-1 nodes

Full Binary Tree :
1. A binary tree in which each level has maximum number of nodes.
2. If h is the height of the tree it will have 2(raise to power h) - 1 nodes.
3. Height of full binary tree = log2(n+1)

Complete Binary Trees
1. All levels have maximum number of nodes except possibly the last level.
2. In the last level, number of nodes range from 1 to 2(raise to h) - 1 and all these nodes are towards the left.
3. Full Binary tree is a unique case of complete binary tree.
4. If a node in a complete binary tree is assigned a number k, where 1 <k <=n, then
4.a If K = 1, then the node is a root node. If K > 1, then it's parents number is floor(k/2)
4.b If 2K > n, then this node has no left child, otherwise the number of left child is 2k.
5. If height of complete binary tree is h, where h >=1. Then maximum number of nodes possible is 2(raised to power h) -1
and minimum number of nodes possible is 2(raised to power h-1)

Extended Binary Tree:
In a binary tree , if each empty subtree is replaced by a special node then the resulting tree is
extended binary tree or 2-tree
Special Nodes  --> External Nodes
Original Nodes --> Internal Nodes

Rule --> In an extended binary tree, if E is the external path length, I is the internal path length and n is the
number of internal nodes, then E= I+2n

Rules for a tree structure to be a Binary Tree:
1. Each node has either zero, one or at max two children. Any more nodes than 2, then the structure is not a binary tree.
2. If a node has two children, it must have one child node that has a lesser value than the parent, and one child that has
a greater value than the parent node.

Properties of Binary Tree:
1. In a binary tree, maximum number of nodes on any level i is 2 raised to i. Where i >= 0.
2. In a binary tree of height h, maximum number of nodes possible is 2(raised to h) - 1.
3. In a binary tree of height h, the minimum number of nodes possible is h.
4. For a binary tree with n nodes, Maximum height possible is n. Minimum height possible is [log(n+1)]to base 2.
6. In a non empty binary tree, if n is the number of nodes and e is the number of edges, then e = n -1
7. In a non empty binary tree, if n0 = number of nodes with no children, and n2 = number of nodes with 2 children , then
n0 = n2 + 1


Searching in a Binary Tree.
The algorithm for searching in a binary tree begins at the root node.
1. Inspect the value at the root node.
2. If we've found the value we are looking for, GREAT !!
3. If the value we are looking for is less than the current node, search for it in the left subtree.
4. If the value we are looking for is greater than the current node, search for it in the right structure.

Inserting data into a Binary Tree.
Binary Trees have O(logN) and O(logN) insertion. This becomes critical in an application where you anticipate a lot
of changes to your data.
basic insertion algorithm:
1. If the left child does not exist, we want to insert the values as the left child.
2. Else, if the right child does not exist, we want to insert the value as the right child.

Deletion
Rules for Deletion:
1. If the node being deleted has no children , simply delete it.
2. If the node being deleted has one child, delete it and plug the child into the spot where the deleted node was.
3. When deleting a node with two children, replace the deleted node with the successor node. The successor node is the child
node whose value is the least of all values that are greater than the deleted node.
-- 3.1 If the successor node has a right child, after plugging the successor node into the spot of the deleted node, take the right child
of the successor node and turn it into the left child of the parent of the successor node.
